g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_smooth(method="lm", formula=y~x)
g
```
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1)
g = g + geom_vline(xintercept = 0)
g = g + geom_hline(yintercept = 0)
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g
x<- c(.18, -1.54, .42, .95)
x
w<- c(2,1,3,1)
x*w/sum(w)
sum(w)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
plot(x,y)
data("mtcars")
lm(mtcars$mpg mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x -mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(y~x)
lm(x~y)
1/1.713
1.713/.04462
var(y)/var(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
y1=y-mean(y)
x1=x-mean(x)
lm(y1~x1)
lm(x~y)
cov(x,y)
cov(x,y)/sd(x)/sd(y)
cov(x,y)/sd(x)/sd(y)*sd(y)/sd(x)
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)~parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,col='red')
summary(regrline)
plot(mpg~wt, mtcars)
rline = lm(mpr~wt, wtcars)
rline = lm(mpg~wt, wtcars)
rline = lm(mpg~wt, mtcars)
abline(rline, lwt=2, col='red')
abline(rline, lwd=2, col='red')
abline(jitter(rline), lwd=2, col='red')
abline(rline, lwd=2, col='red')
summary(rline)
rline
ggplot(data=mtcars, aes(x=wt,y=mpg)) +
geom_smooth(method="lm")
ggplot(data=mtcars, aes(x=wt,y=mpg)) +
geom_point(aes(color='blue')) +
geom_smooth(method="lm")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(I(x-mean(x)) ~ I(y-mean(y)) -1)
lm(I(y-mean(y)) ~ I(x-mean(x)) -1)
lm(y~x)
plot(x,y)
I
help(I)
lm(child~parent, galton)
lm(price~carat, diamond)
help(m)
help(lm)
x
y
lm(y~x-1)
lm(y~x)
lm(y~x+0)
lm(y~0+x)
lm(y+0~x)
lm(y~x)
library("UsingR")
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
mmm <- lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
plot(mmm)
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_smooth(method="lm", formula=y~x)
g
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- ggplot(data=galton,aes(x = parent, y = child))+
geom_point(color="red") +
geom_smooth(method="lm", formula=y~x+0)
g
g <- g+ geom_smooth(method="lm", color="green", formula=y~x)
g
plot(x,y)
abline(mmm)
abline(parent,child,galton)
plot(parent,child,galton)
plot(parent,child,data=galton)
plot(galton$parent, galton$child)
abline(mmm,lwd=2)
mmm <- lm(child~parent, data = galton)
abline(mmm,lwd=2)
data(galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
head(freqData)
names(freqData) <- c('child', 'parent', 'freq')
head(freqData)
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq>0), aes(x=parent, y=childNames()))
head(freqData)
filter(freqData, freq>0)
help("filter")
select(freqData, freq>0)
help("select")
select()
library(dplyr)
g <- ggplot(filter(freqData, freq>0), aes(x=parent, y=childNames()))
g <- g+ scale_size(range=c(2.20), guide="none")
g
g <- g + geom_point(color="grey50", aes(size=freq+20, show_guide=FALSE))
g
g <- g + geom_point(aes(color=freq, size=freq))
g
g <- g + scale_color_gradient(low="lightblue", high="white")
g
g <- ggplot(filter(freqData, freq>0), aes(x=parent, y=child))
g <- g+ scale_size(range=c(2.20), guide="none")
g
g <- g + geom_point(color="grey50", aes(size=freq+20, show_guide=FALSE))
g
g <- g + geom_point(aes(color=freq, size=freq))
g
g <- g + scale_color_gradient(low="lightblue", high="white")
g
g <- ggplot(filter(freqData, freq>0), aes(x=parent, y=child))
g <- g+ scale_size(range=c(2,20), guide="none")
g <- g + geom_point(color="grey50", aes(size=freq+20, show_guide=FALSE))
g
g <- g + geom_point(aes(color=freq, size=freq))
g
g <- g + scale_color_gradient(low="lightblue", high="white")
g
y
sd(y)
y-mean(y)
(y-mean(y))/sd(y)
sd((y-mean(y))/sd(y))
g + geom_smooth(method="lm")
library(caret)
library(kernlab)
data("spam")
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
length(inTrain)
length(spam)
length(spam[1,])
length(spam[,1])
dim(spam)
str(inTrain)
training <- spam[inTrain]
dim(training)
training <- spam[inTrain,]
dim(training)
testing <- spam[-inTrain,]
dim(testing)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=T)
str(inTrain)
training <- spam[inTrain,]
training <- spam[as.array(inTrain),]
inTrain[1]
inTrain[1,1]
inTrain[[1]]
inTrain[[2]]
str(inTrain)
inTrain[1][[1]]
inTrain[1][1[]
]
inTrain[1][1]
str(inTrain[1])
inTrain[2]
inTrain$Resample1[1]
inTrain$Resample1[2]
inTrain$Resample1
training <- spam[inTrain$Resample1,]
str(training)
dim(training)
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
dim(folds)
str(folds)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = FALSE)
str(folds)
modelFit <- train(type ~., data=training, method="glm")
install.packages("e1071", lib="C:/apps/R/R_library")
modelFit <- train(type ~., data=training, method="glm")
warnings()
args(trainControl)
args(train)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
data(galton)
library(UsingR)
data(galton)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
source('E:/tmp/xxx.R')
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
source('E:/tmp/xxx.R')
library(manipulate)
install.packages("manipulate", lib="C:/apps/R/R_library")
library(manipulate)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
y <- galton$child
x <- galton$parent
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")\
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
abline(mean(y) - mean(x) * sd(y) / sd(x) * cor(y, x), #intercept
sd(y) * cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
abline(mean(y) - mean(x) * sd(x) / sd(y) / cor(y, x), #intercept
sd(x) / cor(y, x) / sd(y), #slope
lwd = 3, col = "blue")
lm(y~x)
lm(x~y)
coy(x,y)
cor(x,y)
cor(y,x)
cor(y,x)*sd(x)/sd(y)
cor(y,x)*sd(y)/sd(x)
sd(y)/cor(y,x)/sd(x)
mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x)
mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x)
y <- galton$child
x <- galton$parent
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
xmin=0,ymin=0,
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
#original regression line, children as outcome, parents as predictor
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
#new regression line, parents as outcome, children as predictor
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
#assume correlation is 1 so slope is ratio of std deviations
abline(mean(y) - mean(x) * sd(y) / sd(x), #intercept
sd(y) / sd(x),  #slope
lwd = 2)
y <- galton$child
x <- galton$parent
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
xmin=0,ymin=0,
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
xmin=0,ymin=0,
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
xlim = c(0,100),ylim = c(0,100),
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
#original regression line, children as outcome, parents as predictor
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
#new regression line, parents as outcome, children as predictor
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
#assume correlation is 1 so slope is ratio of std deviations
abline(mean(y) - mean(x) * sd(y) / sd(x), #intercept
sd(y) / sd(x),  #slope
lwd = 2)
abline(46.1,0.3256,lwd=3,col="green")
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
fit2 <- update(fit, .~.-vs)
summary(fit2)
fit3 <- update(fit2, .~.-cyl)
summary(fit3)
fit4 <- update(fit3, .~.-carb)
summary(fit4)
fit5 <- update(fit4, .~.-gear)
summary(fit5)
fit6 <- update(fit5, .~.-drat)
summary(fit6)
fit7 <- update(fit6, .~.-disp)
summary(fit7)
fit8 <- update(fit7, .~.-hp)
summary(fit8)
confint(fit8)
sumCoef8 <- summary(fit8)$coefficients
sumCoef8[1,1] + c(-1, 1) * qt(.975, df = fit8$df) * sumCoef8[1, 2]
sumCoef8[2,1] + c(-1, 1) * qt(.975, df = fit8$df) * sumCoef8[2, 2]
sumCoef8[3,1] + c(-1, 1) * qt(.975, df = fit8$df) * sumCoef8[3, 2]
sumCoef8 <- summary(fit8)$coefficients
sumCoef8[2,1] + c(-1, 1) * qt(.975, df = fit8$df) * sumCoef8[2, 2]
sumCoef8[3,1] + c(-1, 1) * qt(.975, df = fit8$df) * sumCoef8[3, 2]
sumCoef8[4,1] + c(-1, 1) * qt(.975, df = fit8$df) * sumCoef8[4, 2]
model = lm(mpg ~ wt + qsec + am, data = mtcars)
summary(model)
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(model$residuals)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(1,1))
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa
knitr::kable(as.data.frame(aaa))
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = as.data.frame(aaa)
rbind.data.frame(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = as.data.frame(aaa)
aaa = rbind.data.frame(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
row.names(aaa)<-c("")
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa)<-c("")
knitr::kable(aaa)
ronames(aaa)
rownames(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa)<--c("")
knitr::kable(aaa)
rownames(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa)<--c(rep("",6))
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa)<--c(rep("",2))
knitr::kable(aaa)
rep("a",2)
c(rep("a",2))
rownames(aaa)<--c(rep("",2))
rownames(aaa)<- c(rep("",2))
rownames(aaa)<- NULL
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa)<--NULL
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa) <- NULL
knitr::kable(aaa)
aaa = c("mpg","Gas consumption in miles per gallon, float")
aaa = rbind(aaa, c("cyl","Number of cylinders(4, 6 or 8), integer"))
aaa = as.data.frame(aaa)
rownames(aaa) <- NULL
colnames(aaa) <- c('variable', 'description')
knitr::kable(aaa)
```{r plot, echo=2, }
confint(model)
1. “Is an automatic or manual transmission better for MPG”? Since the 95% C.I. doesn't inclide zero, the answer is NO. As you may note that the left end of C.I. is is close to zero. A further digging into the variable wt(why? Because it is always significant in all models), we found that automobiles with automatic transmission are heavier than ones with manual transmission. The range of wight for automatic cars is \Sexpr{ range(mtcars[mtcars$am=='0',]$wt)} while that for manual cars is 'r range(mtcars[mtcars$am=='1',]$wt)' So, if car companies can make lighter automatic cars, the answer could be altered.
summary(model)
confint(model)
range(mtcars[metcars$am=='1',]$wt)
range(mtcars[mtcars$am=='1',]$wt)
range(mtcars[mtcars$am=='0',]$wt)
mean(mtcars[mtcars$am=='0',]$wt)
mean(mtcars[mtcars$am=='1',]$wt)
?predict
train <- read.csv2("Data/train.csv", stringsAsFactors = FALSE,
quote = "\"", sep=",",  allowEscapes = TRUE,
header=TRUE, row.names = NULL)
library(xgboost)
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("gbm")
library("gbm", lib.loc="c:/apps/R/R-3.2.2/library")
remove.packages("gbm")
.libPaths()
.Library.site
.Library
.libPaths()
.libPaths()
.libPaths()
setwd("~/R_course/09_Developing Data Products/Course Project/presentation")
publish(user="kvnkuo", repo="devdataprod-032_courseproject", host="github")
library(slidify)
publish(user="kvnkuo", repo="devdataprod-032_courseproject", host="github")
git
